                                     GRADER

Name of student running submit:
Login of student running submit:

Second team member's name: Xinran Guo
Second team member's login: cs61b-ze

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
A: Yes.

Have you tested your program on the 61B lab machines?
A: Yes.


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?
A: Yes. The default search depth is 3.


Describe your board evaluation function in some detail.
A: We first find all the connections for each chip present on the board. Then we sum up the connections for the chips with the same colors. Then we subtract machine player's total connections with opponent's total connections. And finally we multiply the result by two.


Does your MachinePlayer use any special method of choosing the first few moves?
A: No


Is there anything else the graders should know to help them read your project?
A: If the chooseMove() find out that the next opponent's move will result in a lose, it will find potential position and add a chip to block the potential connection.



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

Best class (Best.java):
  Best class used inside in minimax game tree search. keep track the best score and best move druiing search.

Board class (Board.java):
  Broad class that implements an 8x8 game board with three possible values.

Chip class (Chip.java):
  Chip class represents chips on the board, and contain a Dlist to store its connections, which will be used

Graph class (Graph.java):
  Store all connections of a game board into 
MachinePlayer class (MachinePlayer.java)
Move class (Move.java)
Player class (Player.java)




























